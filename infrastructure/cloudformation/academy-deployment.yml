AWSTemplateFormatVersion: '2010-09-09'
Description: Simplified CloudFormation template for Real-Time Chat with Sentiment Analysis (AWS Academy Version)

Parameters:
  AppName:
    Type: String
    Default: real-time-chat
    Description: Name of the application
  
  DeploymentStage:
    Type: String
    Default: demo
    Description: Deployment stage (e.g., dev, test, demo)
    
  BucketNameSuffix:
    Type: String
    Description: Unique suffix for S3 bucket name to avoid conflicts
    
Resources:
  # ===== STORAGE CATEGORY =====
  # S3 Bucket for storing static content and model artifacts
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AppName}-${DeploymentStage}-${BucketNameSuffix}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000

  # S3 Bucket Policy to allow public read access
  DeploymentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DeploymentBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${DeploymentBucket}/*'
            Principal: '*'

  # ===== DATABASE CATEGORY =====
  # DynamoDB Table for WebSocket connections
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AppName}-${DeploymentStage}-connections"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH

  # DynamoDB Table for chat messages
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AppName}-${DeploymentStage}-messages"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: messageId
          AttributeType: S
      KeySchema:
        - AttributeName: messageId
          KeyType: HASH
          
  # ===== NETWORKING CATEGORY =====
  # WebSocket API for real-time communication
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AppName}-${DeploymentStage}-websocket-api"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # ===== COMPUTE CATEGORY =====
  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-${DeploymentStage}-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                Resource:
                  - !GetAtt ConnectionsTable.Arn
                  - !GetAtt MessagesTable.Arn
        - PolicyName: ApiGatewayManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'execute-api:ManageConnections'
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  # Lambda Function for handling WebSocket connections
  ConnectionManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AppName}-${DeploymentStage}-connection-manager"
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          
          # Initialize DynamoDB client
          dynamodb = boto3.resource('dynamodb')
          connections_table = dynamodb.Table(os.environ['CONNECTIONS_TABLE'])
          
          def handler(event, context):
              connectionId = event['requestContext']['connectionId']
              
              # Store connection ID in DynamoDB
              connections_table.put_item(
                  Item={
                      'connectionId': connectionId
                  }
              )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Connected')
              }
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable

  # Lambda Function for handling WebSocket disconnections
  DisconnectManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AppName}-${DeploymentStage}-disconnect-manager"
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          
          # Initialize DynamoDB client
          dynamodb = boto3.resource('dynamodb')
          connections_table = dynamodb.Table(os.environ['CONNECTIONS_TABLE'])
          
          def handler(event, context):
              connectionId = event['requestContext']['connectionId']
              
              # Remove connection ID from DynamoDB
              connections_table.delete_item(
                  Key={
                      'connectionId': connectionId
                  }
              )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Disconnected')
              }
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable

  # WebSocket Routes and Integrations
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Sub "integrations/${ConnectIntegration}"

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Sub "integrations/${DisconnectIntegration}"

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionManagerFunction.Arn}/invocations"

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectManagerFunction.Arn}/invocations"

  # Lambda Permissions
  ConnectionManagerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectionManagerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect"

  DisconnectManagerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectManagerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect"

  # WebSocket API Deployment and Stage
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketApi

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref Deployment
      StageName: !Ref DeploymentStage

Outputs:
  WebSocketURL:
    Description: "WebSocket URL"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${DeploymentStage}"
  
  S3BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref DeploymentBucket
  
  ConnectionsTableName:
    Description: "DynamoDB Connections Table Name"
    Value: !Ref ConnectionsTable
  
  MessagesTableName:
    Description: "DynamoDB Messages Table Name"
    Value: !Ref MessagesTable 