AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for CloudWatch monitoring of the chat application'

Parameters:
  EnvironmentName:
    Description: An environment name for resource naming (e.g., Dev, Test, Prod)
    Type: String
    Default: Prod
  
  ConnectionsTableName:
    Description: Name of the DynamoDB Connections table
    Type: String
  
  MessagesTableName:
    Description: Name of the DynamoDB Messages table
    Type: String
  
  MessageProcessorFunctionName:
    Description: Name of the Lambda function that processes messages
    Type: String
  
  ConnectionManagerFunctionName:
    Description: Name of the Lambda function that manages connections
    Type: String
  
  ModelTrainingInstanceId:
    Description: EC2 Instance ID for model training
    Type: String
  
  Email:
    Description: Email address to send alerts to
    Type: String
    Default: admin@example.com

Resources:
  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${EnvironmentName} Chat Application Alerts"
      TopicName: !Sub "${EnvironmentName}-chat-alerts"

  # SNS Subscription
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlertTopic
      Protocol: email
      Endpoint: !Ref Email

  # CloudWatch Dashboard
  ApplicationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${EnvironmentName}-chat-dashboard"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${MessageProcessorFunctionName}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Duration", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Message Processor Lambda Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${ConnectionManagerFunctionName}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Duration", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Connection Manager Lambda Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${ConnectionsTableName}" ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Connections Table Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${MessagesTableName}" ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Messages Table Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "InstanceId", "${ModelTrainingInstanceId}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "EC2 Model Training CPU Utilization",
                "period": 300
              }
            }
          ]
        }

  # CloudWatch Alarms
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-lambda-errors"
      AlarmDescription: Alarm when Lambda functions have errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref MessageProcessorFunctionName
      AlarmActions:
        - !Ref AlertTopic
  
  DynamoDBThrottlingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-dynamodb-throttling"
      AlarmDescription: Alarm when DynamoDB tables experience throttling
      MetricName: ThrottledRequests
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref MessagesTableName
      AlarmActions:
        - !Ref AlertTopic
  
  EC2CPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-ec2-cpu"
      AlarmDescription: Alarm when EC2 instance CPU exceeds 80%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref ModelTrainingInstanceId
      AlarmActions:
        - !Ref AlertTopic

Outputs:
  DashboardURL:
    Description: URL to the CloudWatch Dashboard
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${EnvironmentName}-chat-dashboard"
  
  AlertTopicARN:
    Description: ARN of the SNS Topic for alerts
    Value: !Ref AlertTopic 