AWSTemplateFormatVersion: '2010-09-09'
Description: 'Real-Time Chat Application with Sentiment Analysis - Main Template for AWS Academy (using LabRole)'

Parameters:
  EnvironmentName:
    Description: An environment name for resource naming (e.g., Dev, Test, Prod)
    Type: String
    Default: Prod
  
  S3BucketName:
    Description: Name of the existing S3 bucket for deployment artifacts and frontend hosting
    Type: String
  
  EC2InstanceType:
    Description: EC2 instance type for model training
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
  
  AdminEmail:
    Description: Email address for notifications and alerts
    Type: String
    Default: admin@example.com

Resources:
  # ========================================================================
  # DynamoDB Tables
  # ========================================================================
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${EnvironmentName}-chat-connections'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${EnvironmentName}-chat-messages'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: messageId
          AttributeType: S
      KeySchema:
        - AttributeName: messageId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # ========================================================================
  # API Gateway WebSocket API
  # ========================================================================
  WebSocketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${EnvironmentName}-chat-websocket-api'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # WebSocket API Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join 
        - /
        - - integrations
          - !Ref ConnectIntegration

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join 
        - /
        - - integrations
          - !Ref DisconnectIntegration

  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: sendMessage
      AuthorizationType: NONE
      OperationName: SendMessageRoute
      Target: !Join 
        - /
        - - integrations
          - !Ref SendMessageIntegration

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join 
        - /
        - - integrations
          - !Ref DefaultIntegration

  # WebSocket API Integrations
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionManagerFunction.Arn}/invocations

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionManagerFunction.Arn}/invocations

  SendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      Description: Send Message Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessageProcessorFunction.Arn}/invocations

  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultHandlerFunction.Arn}/invocations

  # WebSocket API Stage
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketAPI
      StageName: prod
      Description: Production Stage
      AutoDeploy: true

  # ========================================================================
  # Lambda Functions (using existing LabRole)
  # ========================================================================
  ConnectionManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${EnvironmentName}-chat-connection-manager'
      Handler: connection_manager.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: lambda/connection_manager.zip
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          WEBSOCKET_ENDPOINT: !Sub "${WebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"

  MessageProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${EnvironmentName}-chat-message-processor'
      Handler: message_processor.handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 256
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: lambda/message_processor.zip
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          MESSAGES_TABLE: !Ref MessagesTable
          WEBSOCKET_ENDPOINT: !Sub "${WebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"
          EVENT_BUS_NAME: !Ref ChatEventBus

  DefaultHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${EnvironmentName}-chat-default-handler'
      Handler: default_handler.handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 256
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: lambda/default_handler.zip
      Environment:
        Variables:
          WEBSOCKET_ENDPOINT: !Sub "${WebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"

  BroadcastFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${EnvironmentName}-chat-broadcast'
      Handler: message_broadcast.handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 256
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: lambda/message_broadcast.zip
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          WEBSOCKET_ENDPOINT: !Sub "${WebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"
          EVENT_BUS_NAME: !Ref ChatEventBus

  # Lambda Permissions for API Gateway
  ConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectionManagerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/*"

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectionManagerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/*"

  SendMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MessageProcessorFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/*"

  DefaultPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefaultHandlerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/*"

  # ========================================================================
  # EC2 Instance for Model Training
  # ========================================================================
  ModelTrainingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for sentiment model training EC2 instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: Allow SSH access from anywhere (for demo purposes only)

  ModelTrainingInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2InstanceType
      SecurityGroups:
        - !Ref ModelTrainingSecurityGroup
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI (HVM) in us-west-2 region
      IamInstanceProfile: LabInstanceProfile  # Use LabRole via instance profile
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-sentiment-model-training
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update and install dependencies
          yum update -y
          yum install -y python3 python3-pip git

          # Create a directory for the model training code
          mkdir -p /home/ec2-user/sentiment-training

          # Create training script
          cat > /home/ec2-user/sentiment-training/train_model.py << 'EOL'
          import boto3
          import json
          import datetime
          import os
          
          def train_sentiment_model():
              """
              Train sentiment analysis model and upload to S3
              This is a simplified training function for demonstration purposes
              """
              print("Starting sentiment model training...")
              
              # In a real scenario, we would:
              # 1. Load data from DynamoDB or S3
              # 2. Preprocess data
              # 3. Train a sentiment analysis model (NLTK, spaCy, etc.)
              # 4. Save the model

              # For this demo, we'll create a simple word-based sentiment analyzer
              model = {
                  "positive_words": [
                      "happy", "good", "great", "excellent", "wonderful", "awesome",
                      "fantastic", "nice", "amazing", "love", "best", "beautiful",
                      "perfect", "brilliant", "outstanding", "fabulous", "superb"
                  ],
                  "negative_words": [
                      "sad", "bad", "terrible", "awful", "horrible", "disappointing",
                      "poor", "worst", "hate", "dislike", "annoying", "frustrating",
                      "unpleasant", "painful", "disgusting", "dreadful", "miserable"
                  ],
                  "training_timestamp": datetime.datetime.now().isoformat(),
                  "version": "1.0.0"
              }
              
              # Save the model locally
              with open('sentiment_model.json', 'w') as f:
                  json.dump(model, f, indent=2)
              
              # Upload to S3
              s3_bucket = os.environ.get('S3_BUCKET_NAME')
              if not s3_bucket:
                  print("Error: S3_BUCKET_NAME environment variable not set")
                  return False
              
              try:
                  s3 = boto3.client('s3')
                  s3.upload_file(
                      'sentiment_model.json',
                      s3_bucket,
                      'models/sentiment_model.json'
                  )
                  print(f"Successfully uploaded model to s3://{s3_bucket}/models/sentiment_model.json")
                  
                  # Publish event to EventBridge
                  eventbridge = boto3.client('events')
                  eventbridge.put_events(
                      Entries=[
                          {
                              'Source': 'chat.application',
                              'DetailType': 'ModelTrainingCompleted',
                              'Detail': json.dumps({
                                  'timestamp': datetime.datetime.now().isoformat(),
                                  'modelVersion': '1.0.0',
                                  's3Location': f"s3://{s3_bucket}/models/sentiment_model.json"
                              }),
                              'EventBusName': '${ChatEventBus}'
                          }
                      ]
                  )
                  print("Published ModelTrainingCompleted event to EventBridge")
                  
                  return True
              except Exception as e:
                  print(f"Error: {e}")
                  return False
          
          if __name__ == "__main__":
              train_sentiment_model()
          EOL

          # Create cron job script to run training daily
          cat > /home/ec2-user/sentiment-training/run_training.sh << 'EOL'
          #!/bin/bash
          cd /home/ec2-user/sentiment-training
          export S3_BUCKET_NAME="${S3BucketName}"
          python3 train_model.py >> training.log 2>&1
          EOL

          # Make script executable
          chmod +x /home/ec2-user/sentiment-training/run_training.sh

          # Set up cron job to run training daily at midnight
          echo "0 0 * * * /home/ec2-user/sentiment-training/run_training.sh" > /tmp/crontab
          crontab -u ec2-user /tmp/crontab

          # Install AWS SDK for Python (boto3)
          pip3 install boto3

          # Run training once during setup
          sudo -u ec2-user bash -c "cd /home/ec2-user/sentiment-training && S3_BUCKET_NAME=${S3BucketName} python3 train_model.py > initial_training.log 2>&1"

  # ========================================================================
  # EventBridge
  # ========================================================================
  ChatEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub ${EnvironmentName}-chat-events

  MessageCreatedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${EnvironmentName}-message-created
      Description: 'Rule that triggers when a new message is created'
      EventBusName: !Ref ChatEventBus
      EventPattern:
        source:
          - 'chat.application'
        detail-type:
          - 'MessageCreated'
      State: ENABLED
      Targets:
        - Id: 'BroadcastTarget'
          Arn: !GetAtt BroadcastFunction.Arn

  SentimentAnalysisCompletedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${EnvironmentName}-sentiment-analysis-completed
      Description: 'Rule that triggers when sentiment analysis is completed'
      EventBusName: !Ref ChatEventBus
      EventPattern:
        source:
          - 'chat.application'
        detail-type:
          - 'SentimentAnalysisCompleted'
      State: ENABLED
      Targets:
        - Id: 'MessageProcessorTarget'
          Arn: !GetAtt MessageProcessorFunction.Arn

  ModelTrainingCompletedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${EnvironmentName}-model-training-completed
      Description: 'Rule that triggers when model training is completed'
      EventBusName: !Ref ChatEventBus
      EventPattern:
        source:
          - 'chat.application'
        detail-type:
          - 'ModelTrainingCompleted'
      State: ENABLED
      Targets:
        - Id: 'MessageProcessorTarget'
          Arn: !GetAtt MessageProcessorFunction.Arn

  # EventBridge Permissions
  EventBridgeMessageProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MessageProcessorFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SentimentAnalysisCompletedRule.Arn

  EventBridgeModelTrainingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MessageProcessorFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ModelTrainingCompletedRule.Arn

  EventBridgeBroadcastPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BroadcastFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MessageCreatedRule.Arn

  # ========================================================================
  # CloudWatch Monitoring
  # ========================================================================
  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${EnvironmentName} Chat Application Alerts"
      TopicName: !Sub "${EnvironmentName}-chat-alerts"

  # SNS Subscription
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlertTopic
      Protocol: email
      Endpoint: !Ref AdminEmail

  # CloudWatch Dashboard
  ApplicationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${EnvironmentName}-chat-dashboard"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${MessageProcessorFunction}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Duration", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Message Processor Lambda Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${ConnectionManagerFunction}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Duration", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Connection Manager Lambda Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${ConnectionsTable}" ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Connections Table Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${MessagesTable}" ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Messages Table Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "InstanceId", "${ModelTrainingInstance}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "EC2 Model Training CPU Utilization",
                "period": 300
              }
            }
          ]
        }

  # CloudWatch Alarms
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-lambda-errors"
      AlarmDescription: Alarm when Lambda functions have errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref MessageProcessorFunction
      AlarmActions:
        - !Ref AlertTopic

  DynamoDBThrottlingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-dynamodb-throttling"
      AlarmDescription: Alarm when DynamoDB tables experience throttling
      MetricName: ThrottledRequests
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref MessagesTable
      AlarmActions:
        - !Ref AlertTopic

  EC2CPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-ec2-cpu"
      AlarmDescription: Alarm when EC2 instance CPU exceeds 80%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref ModelTrainingInstance
      AlarmActions:
        - !Ref AlertTopic

  # CloudWatch Log Groups
  MessageProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${MessageProcessorFunction}"
      RetentionInDays: 14
  
  ConnectionManagerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ConnectionManagerFunction}"
      RetentionInDays: 14
  
  BroadcastFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${BroadcastFunction}"
      RetentionInDays: 14
  
  DefaultHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DefaultHandlerFunction}"
      RetentionInDays: 14

Outputs:
  WebSocketURL:
    Description: WebSocket URL for client connections
    Value: !Sub "wss://${WebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"
    
  FrontendURL:
    Description: URL for the frontend website
    Value: !Sub "http://${S3BucketName}.s3-website-${AWS::Region}.amazonaws.com/index.html"
    
  ConnectionsTableName:
    Description: DynamoDB table for WebSocket connections
    Value: !Ref ConnectionsTable
    
  MessagesTableName:
    Description: DynamoDB table for chat messages
    Value: !Ref MessagesTable
    
  S3ConsoleURL:
    Description: URL to access the S3 bucket in AWS console
    Value: !Sub "https://s3.console.aws.amazon.com/s3/buckets/${S3BucketName}?region=${AWS::Region}"
  
  ModelTrainingInstanceId:
    Description: EC2 Instance ID for the model training server
    Value: !Ref ModelTrainingInstance
  
  ModelTrainingPublicDNS:
    Description: Public DNS of the model training EC2 instance
    Value: !GetAtt ModelTrainingInstance.PublicDnsName
  
  ChatEventBusName:
    Description: Name of the EventBridge event bus
    Value: !Ref ChatEventBus
  
  DashboardURL:
    Description: URL to the CloudWatch Dashboard
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${EnvironmentName}-chat-dashboard"
  
  AlertTopicARN:
    Description: ARN of the SNS Topic for alerts
    Value: !Ref AlertTopic 