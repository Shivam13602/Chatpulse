AWSTemplateFormatVersion: '2010-09-09'
Description: 'Real-time Chat App - API Gateway and Lambda Function'

Parameters:
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket to store Lambda code and model artifacts

  ApiStageName:
    Type: String
    Default: prod
    Description: Stage name for the API Gateway deployment

Resources:
  # DynamoDB Tables
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-Messages"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: messageId
          AttributeType: S
        - AttributeName: roomId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: messageId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: RoomIndex
          KeySchema:
            - AttributeName: roomId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-Users"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH

  # API Gateway
  ChatApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-ChatAPI"
      Description: API for real-time chat application
      EndpointConfiguration:
        Types:
          - REGIONAL

  # WebSocket API for real-time communication
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}-WebSocketAPI"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref ApiStageName
      DefaultRouteSettings:
        DataTraceEnabled: true
        LoggingLevel: INFO

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref ConnectIntegration

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref DisconnectIntegration

  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendMessageRoute
      Target: !Join
        - /
        - - integrations
          - !Ref SendMessageIntegration

  # WebSocket Integrations
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations

  SendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations

  # Lambda Functions
  WebSocketHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-WebSocketHandler"
      Runtime: python3.9
      Handler: websocket_handler.lambda_handler
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: lambda/websocket_handler.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          MESSAGES_TABLE: !Ref MessagesTable
          USERS_TABLE: !Ref UsersTable
          WEBSOCKET_API_ENDPOINT: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}"
      Timeout: 30
      MemorySize: 256

  # Lambda permission for WebSocket API to invoke Lambda
  WebSocketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketHandlerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*

  # IAM Role for Lambda execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-LambdaPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt MessagesTable.Arn
                  - !GetAtt UsersTable.Arn
                  - !Sub "${MessagesTable.Arn}/index/*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/models/*"
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${ApiStageName}/*"

  # REST API Endpoints
  MessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ChatApi
      ParentId: !GetAtt ChatApi.RootResourceId
      PathPart: messages

  # REST API Methods
  GetMessagesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatApi
      ResourceId: !Ref MessageResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestApiFunction.Arn}/invocations

  # Lambda Function for REST API
  RestApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-RestApi"
      Runtime: python3.9
      Handler: rest_api.lambda_handler
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: lambda/rest_api.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          MESSAGES_TABLE: !Ref MessagesTable
          USERS_TABLE: !Ref UsersTable
      Timeout: 30
      MemorySize: 256

  # Lambda Permission for REST API
  RestApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RestApiFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatApi}/*

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetMessagesMethod
    Properties:
      RestApiId: !Ref ChatApi
      StageName: !Ref ApiStageName

Outputs:
  WebSocketApiEndpoint:
    Description: WebSocket API endpoint URL
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}"
    Export:
      Name: !Sub "${AWS::StackName}-WebSocketApiEndpoint"

  RestApiEndpoint:
    Description: REST API endpoint URL
    Value: !Sub "https://${ChatApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}"
    Export:
      Name: !Sub "${AWS::StackName}-RestApiEndpoint"

  MessagesTableName:
    Description: DynamoDB Messages table name
    Value: !Ref MessagesTable
    Export:
      Name: !Sub "${AWS::StackName}-MessagesTableName"

  UsersTableName:
    Description: DynamoDB Users table name
    Value: !Ref UsersTable
    Export:
      Name: !Sub "${AWS::StackName}-UsersTableName" 